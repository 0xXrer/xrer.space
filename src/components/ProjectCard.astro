---
import type { ProjectConfig } from "@/config/portfolio";
import Card, { CardContent } from "@/components/card";

interface Props {
    project: ProjectConfig;
    featured?: boolean;
    gridClass?: string;
}

const {
    project,
    featured = false,
    gridClass = "col-span-full h-full md:col-span-3",
} = Astro.props;

// Map icon names to actual imports
const iconMap: Record<string, any> = {
    LucideBox: "lucide-react",
    Key: "lucide-react",
};

// For now, we'll use a simple string approach for icons
// In a real implementation, you might want to use a more sophisticated icon system
---

<section class={gridClass}>
    <Card className="relative flex size-full flex-col gap-4">
        {
            featured && (
                <div class="absolute -top-[23px] left-2 rounded-t-sm px-1.5 py-1 border border-border border-b-0 bg-gradient-to-b from-primary/20 to-primary/10 !text-[0.5625rem] text-primary font-medium">
                    {project.badge || "Featured Project"}
                </div>
            )
        }
        <section class="relative flex size-full flex-col gap-4">
            <div
                class="group relative p-2 overflow-hidden rounded-md border border-border transition-all duration-300 ease-in-out hover:border-primary select-none"
            >
                <!-- Diagonal Lines Pattern -->
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="absolute inset-0 w-full h-full pointer-events-none stroke-border transition-all duration-300 ease-in-out group-hover:stroke-primary"
                >
                    <defs>
                        <pattern
                            id={`diagonalPattern-${project.id}`}
                            patternUnits="userSpaceOnUse"
                            width="10"
                            height="10"
                            patternTransform="rotate(45)"
                        >
                            <line x1="0" y1="0" x2="0" y2="10" stroke-width="1"
                            ></line>
                        </pattern>
                    </defs>
                    <rect
                        width="100%"
                        height="100%"
                        fill={`url(#diagonalPattern-${project.id})`}></rect>
                </svg>

                <!-- Media Container -->
                <div
                    class="video-container relative"
                    data-link={project.url || "#"}
                    data-project-id={project.id}
                    data-video-src={project.videoSrc || ""}
                >
                    {
                        project.videoSrc ? (
                            <>
                                <video
                                    class="video-element w-full h-auto object-cover rounded-sm relative z-2 pointer-events-none select-none"
                                    muted
                                    loop
                                    playsinline
                                    preload="auto"
                                    style="min-height: 200px; width: 100%; display: block; background: #000;"
                                    poster=""
                                >
                                    <source
                                        src={project.videoSrc}
                                        type="video/mp4"
                                    />
                                    Your browser does not support the video tag.
                                </video>
                                <!-- Expand Video Button on Hover -->
                                <button
                                    class="expand-video-btn absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10 bg-black/70 hover:bg-black/90 text-white rounded-full p-4 opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-auto"
                                    data-video-expand={project.id}
                                    aria-label="Expand video"
                                >
                                    <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        width="24"
                                        height="24"
                                        viewBox="0 0 24 24"
                                        fill="none"
                                        stroke="currentColor"
                                        stroke-width="2"
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                    >
                                        <polyline points="15 3 21 3 21 9"></polyline>
                                        <polyline points="9 21 3 21 3 15"></polyline>
                                        <line x1="21" x2="14" y1="3" y2="10"></line>
                                        <line x1="3" x2="10" y1="21" y2="14"></line>
                                    </svg>
                                </button>
                            </>
                        ) : project.imageSrc ? (
                            <img
                                src={project.imageSrc}
                                alt={project.title}
                                class="w-full h-auto object-cover rounded-sm relative z-2 pointer-events-none select-none"
                                style="min-height: 200px; width: 100%;"
                            />
                        ) : (
                            <div class="w-full h-48 bg-muted rounded-sm relative z-2 flex items-center justify-center">
                                <span class="text-muted-foreground">
                                    No media available
                                </span>
                            </div>
                        )
                    }
                </div>

                <!-- Bottom Panel -->
                <div
                    class="absolute bg-background right-0 bottom-0 left-0 z-4 flex items-center border-t border-primary divide-x divide-primary text-primary text-xs shadow-sm transform transition-transform duration-200 group-hover:translate-y-0 md:translate-y-full"
                >
                    {
                        project.url && (
                            <a
                                class="w-full px-3 py-2 text-center hover:bg-primary/10 transition-colors"
                                href={project.url}
                                target="_blank"
                                rel="noopener noreferrer"
                            >
                                Learn More →
                            </a>
                        )
                    }
                    {
                        project.githubUrl && (
                            <a
                                class="w-full px-3 py-2 text-center hover:bg-primary/10 transition-colors"
                                href={project.githubUrl}
                                target="_blank"
                                rel="noopener noreferrer"
                            >
                                GitHub →
                            </a>
                        )
                    }
                </div>
            </div>

            <CardContent>
                <h3 class="flex flex-row gap-2 items-center">
                    {
                        project.icon === "LucideBox" && (
                            <svg
                                class="h-4 w-4"
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                            >
                                <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z" />
                                <polyline points="3.27 6.96 12 12.01 20.73 6.96" />
                                <line x1="12" y1="22.08" x2="12" y2="12" />
                            </svg>
                        )
                    }
                    {
                        project.icon === "Key" && (
                            <svg
                                class="h-4 w-4"
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                            >
                                <circle cx="7.5" cy="15.5" r="5.5" />
                                <path d="m21 2-9.6 9.6" />
                                <path d="m15.5 7.5 3 3L22 7l-3-3" />
                            </svg>
                        )
                    }
                    {project.title}
                </h3>
                <div class="text-muted-foreground text-sm">
                    <p>{project.description}</p>
                    {
                        project.longDescription && (
                            <p>{project.longDescription}</p>
                        )
                    }
                    {
                        project.url && (
                            <p>
                                Check it out at:
                                <a
                                    href={project.url}
                                    class="text-primary hover:underline ml-1"
                                    target="_blank"
                                    rel="noopener noreferrer"
                                >
                                    {project.url.replace(/^https?:\/\//, "")}
                                </a>
                            </p>
                        )
                    }
                </div>
            </CardContent>
        </section>
    </Card>
</section>

<style>
    .video-element {
        opacity: 1 !important;
        visibility: visible !important;
        background-color: #000;
        object-fit: cover;
    }

    .video-container {
        overflow: hidden;
    }

    .video-element::-webkit-media-controls {
        display: none !important;
    }

    .video-element::-webkit-media-controls-start-playback-button {
        display: none !important;
    }
</style>

<!-- JavaScript for video hover functionality -->
<script define:vars={{ projectId: project.id, projectUrl: project.url }}>
    document.addEventListener("DOMContentLoaded", function () {
        const videoContainers = document.querySelectorAll(
            `[data-project-id="${projectId}"]`,
        );

        videoContainers.forEach((container) => {
            const video = container.querySelector(".video-element");
            const expandBtn = container.querySelector(`[data-video-expand="${projectId}"]`);

            if (!video) return;

            console.log(`Setting up video for project: ${projectId}`);

            // Ensure video is visible and ready
            video.style.opacity = "1";
            video.style.visibility = "visible";

            // Preload the video
            video.load();

            // Mouse enter - play video immediately
            container.addEventListener("mouseenter", () => {
                video.currentTime = 0;
                video.style.opacity = "1";

                // Try to play immediately
                video
                    .play()
                    .then(() => {
                        console.log(`Video playing for project: ${projectId}`);
                    })
                    .catch((error) => {
                        console.log("Auto-play prevented:", error);
                        // Fallback: try to show first frame
                        video.start();
                    });
            });

            // Mouse leave - pause video
            container.addEventListener("mouseleave", () => {
                video.pause();
                video.currentTime = 0;
            });

            // Add loading event listeners
            video.addEventListener("loadeddata", () => {
                console.log(`Video data loaded for project: ${projectId}`);
                video.style.opacity = "1";
            });

            video.addEventListener("canplay", () => {
                console.log(`Video can play for project: ${projectId}`);
                video.style.opacity = "1";
            });

            video.addEventListener("error", (e) => {
                console.error(`Video error for project ${projectId}:`, e);
            });

            // Force visibility after a short delay
            setTimeout(() => {
                video.style.opacity = "1";
                video.style.visibility = "visible";
            }, 100);

            // Expand video button functionality
            if (expandBtn) {
                expandBtn.addEventListener("click", (e) => {
                    e.stopPropagation();
                    const videoSrc = container.dataset.videoSrc;
                    if (videoSrc) {
                        openVideoModal(videoSrc, projectId);
                    }
                });
            }
        });
    });

    // Video modal functionality
    function openVideoModal(videoSrc, projectId) {
        // Create modal backdrop
        const modal = document.createElement("div");
        modal.className = "fixed inset-0 z-50 flex items-center justify-center bg-black/80 backdrop-blur-sm";
        modal.setAttribute("data-video-modal", projectId);

        // Create modal content
        modal.innerHTML = `
            <div class="relative max-w-[90vw] max-h-[90vh] w-full h-full flex items-center justify-center">
                <!-- Close button -->
                <button
                    class="absolute top-4 right-4 z-10 w-10 h-10 flex items-center justify-center bg-black/50 hover:bg-black/90 text-white rounded-full transition-all duration-200"
                    aria-label="Close video"
                    onclick="this.closest('[data-video-modal]').remove(); document.body.style.overflow = 'unset';"
                >
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M18 6L6 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </button>

                <!-- Loading spinner -->
                <div class="absolute inset-0 flex items-center justify-center loading-spinner">
                    <div class="w-8 h-8 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                </div>

                <!-- Video player -->
                <video
                    class="max-w-full max-h-full object-contain rounded-lg"
                    src="${videoSrc}"
                    controls
                    autoplay
                    muted
                    onloadeddata="this.parentElement.querySelector('.loading-spinner').style.display = 'none';"
                    onerror="this.parentElement.querySelector('.loading-spinner').innerHTML = '<div class=\\"text-white text-lg\\">Error loading video</div>';"
                />
            </div>
        `;

        // Close on backdrop click
        modal.addEventListener("click", (e) => {
            if (e.target === modal) {
                modal.remove();
                document.body.style.overflow = "unset";
            }
        });

        // Close on Escape key
        const handleEscape = (e) => {
            if (e.key === "Escape") {
                modal.remove();
                document.body.style.overflow = "unset";
                document.removeEventListener("keydown", handleEscape);
            }
        };
        document.addEventListener("keydown", handleEscape);

        // Prevent body scroll
        document.body.style.overflow = "hidden";

        // Add modal to page
        document.body.appendChild(modal);
    }
</script>
